// Type definitions for node-git-server 0.6.0
// Project: https://github.com/gabrielcsapo/node-git-server
// Definitions by: sounisi5011 <https://github.com/sounisi5011>

import { EventEmitter } from 'events';
import * as fs from 'fs';
import * as http from 'http';
import * as https from 'https';

/**
 * @see https://github.com/gabrielcsapo/node-git-server/blob/0.6.0/lib/git.js
 */
declare class Git extends EventEmitter {
    public constructor(
        repoDir: string | ((dir?: string) => string),
        options?: Git.Options,
    );

    public list(
        callback: (
            error: Parameters<Parameters<typeof fs.readdir>[2]>[0] | null,
            repos?: string[],
        ) => void,
    ): void;

    public exists(
        repo: string,
        callback: Parameters<typeof fs.exists>[1],
    ): void;

    public mkdir(dir: string, callback: () => void): void;

    public create(
        repo: string,
        callback: (err: string | true | null) => void,
    ): void;

    public getType(service: 'upload-pack'): 'fetch';

    public getType(service: 'receive-pack'): 'push';

    public getType(service: string): 'unknown';

    public handle(req: http.IncomingMessage, res: http.ServerResponse): void;

    public listen(port: number, callback: Function): this;

    public listen(
        port: number,
        options:
            | { type: 'http' }
            | ({ type: string } & Parameters<typeof https.createServer>[0]),
        callback: Function,
    ): this;

    public close(): Promise<void>;

    public on(
        event: 'push',
        listener: (
            push: Git.ListenerArg & { commit: string; branch: string },
        ) => void,
    ): this;

    public on(
        event: 'tag',
        listener: (
            tag: Git.ListenerArg & { commit: string; version: string },
        ) => void,
    ): this;

    public on(
        event: 'fetch',
        listener: (fetch: Git.ListenerArg & { commit: string }) => void,
    ): this;

    public on(event: 'info', listener: (info: Git.ListenerArg) => void): this;

    public on(event: 'head', listener: (head: Git.ListenerArg) => void): this;

    private dirMap: (dir?: string) => string;
    public server?:
        | ReturnType<typeof http.createServer>
        | ReturnType<typeof https.createServer>;
}

declare namespace Git {
    export interface ListenerArg extends HttpDuplex {
        repo: string;

        accept(): void;

        reject(): void;
    }

    export interface Options {
        autoCreate?: boolean;
        authenticate?: (
            arg: {
                type: string;
                repo: string;
                user: void;
                headers: void | http.IncomingMessage['headers'];
            },
            next: (error?: string | { toString(): string }) => void,
        ) => void | Promise<void>;
        checkout?: boolean;
    }

    /**
     * @see https://github.com/gabrielcsapo/node-git-server/blob/0.6.0/lib/http-duplex.js
     */
    export class HttpDuplex extends EventEmitter {
        public constructor(
            input: http.IncomingMessage,
            output: http.ServerResponse,
        );

        public req: http.IncomingMessage;
        public res: http.ServerResponse;

        public readonly client: /* this['req']['client'] */ unknown;
        public readonly complete: this['req']['complete'];
        public readonly connection: this['req']['connection'];
        public readonly headers: this['req']['headers'];
        public readonly httpVersion: this['req']['httpVersion'];
        public readonly httpVersionMajor: this['req']['httpVersionMajor'];
        public readonly httpVersionMinor: this['req']['httpVersionMinor'];
        public readonly method: this['req']['method'];
        public readonly readable: this['req']['readable'];
        public readonly socket: this['req']['socket'];

        public statusCode: this['res']['statusCode'];
        public statusMessage: this['res']['statusMessage'];

        public readonly trailers: this['req']['trailers'];
        public readonly upgrade: /* this['req']['upgrade'] */ boolean;
        public readonly url: this['req']['url'];

        public readonly writable: this['res']['writable'];

        public writeHead: this['res']['writeHead'];
        // @ts-expect-error
        public cork: this['res']['connection']['cork'];
        // @ts-expect-error
        public uncork: this['res']['connection']['uncork'];

        // proxy request methods
        public pause: this['req']['pause'];
        public resume: this['req']['resume'];
        public setEncoding: this['req']['setEncoding'];

        // proxy respone methods
        public setDefaultEncoding: this['res']['setDefaultEncoding'];
        public write: this['res']['write'];
        public end: this['res']['end'];
        public flush: /* this['res']['flush'] */ Function;
        // public writeHeader: this['res']['writeHeader']; // deprecated!
        public writeContinue: this['res']['writeContinue'];
        public setHeader: this['res']['setHeader'];
        public getHeader: this['res']['getHeader'];
        public removeHeader: this['res']['removeHeader'];
        public addTrailers: this['res']['addTrailers'];

        public destroy(): void;
    }
}

export = Git;
